generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                   String              @id @default(cuid())
  name                 String?
  email                String              @unique
  emailVerified        DateTime?
  image                String?
  role                 UserRole            @default(USER)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  marketingOptIn       Boolean             @default(false)
  notificationsEnabled Boolean             @default(true)
  username             String?             @unique
  level                Int                 @default(1)
  xp                   Int                 @default(0)
  passwordHash         String?             @db.VarChar(255)
  accounts             Account[]
  adRequests           AdRequest[]
  advertiseCampaigns   AdvertiseCampaign[]
  campaignPayments     CampaignPayment[]
  commentVotes         CommentVote[]
  following            Follow[]            @relation("follower")
  followers            Follow[]            @relation("following")
  gameFollows          GameFollow[]
  likes                Like[]
  metrics              Metric[]
  notifications        Notification[]
  playtestClaims       PlaytestClaim[]
  pollVotes            PollVote[]
  posts                Post[]
  postComments         PostComment[]
  products             Product[]
  comments             ProductComment[]
  productMakers        ProductMaker[]
  sessions             Session[]
  studios              Studio[]
  votes                Vote[]
  campaigns            Campaign[]
}

model Product {
  id                 String            @id @default(cuid())
  title              String
  description        String
  url                String?
  image              String?
  userId             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tagline            String?
  images             String[]
  platforms          String[]
  socialLinks        Json?
  video              String?
  countries          String[]
  status             ProductStatus     @default(DRAFT)
  releaseAt          DateTime?
  clicks             Int               @default(0)
  follows            Int               @default(0)
  crowdfundingPledge Boolean           @default(false)
  demoUrl            String?
  engine             String?
  gallery            Json?
  gameplayGifUrl     String?
  gamificationTags   String[]
  languages          Json?
  launchDate         DateTime?
  launchType         String?
  monetization       String?
  playtestExpiry     DateTime?
  playtestQuota      Int?
  pricing            String?
  promoCode          String?
  promoExpiry        DateTime?
  promoOffer         String?
  sponsorNote        String?
  sponsorRequest     Boolean           @default(false)
  studioName         String?
  thumbnail          String?
  videoUrl           String?
  youtubeUrl         String?
  androidUrl         String?
  iosUrl             String?
  editorChoice       Boolean           @default(false)
  editorial_boost    Boolean           @default(false)
  editorial_override Boolean           @default(false)
  slug               String            @unique
  followUsers        GameFollow[]
  metrics            Metric[]
  playtests          Playtest[]
  pressKit           PressKit?
  user               User              @relation(fields: [userId], references: [id])
  categories         ProductCategory[]
  comments           ProductComment[]
  makers             ProductMaker[]
  tags               ProductTag[]
  votes              Vote[]

  @@index([createdAt], map: "idx_product_createdAt")
  @@index([status, createdAt], map: "idx_product_status_createdAt")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([productId, createdAt], map: "idx_vote_productId_createdAt")
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId, createdAt], map: "idx_follow_followerId_createdAt")
  @@index([followingId, createdAt], map: "idx_follow_followingId_createdAt")
}

model GameFollow {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@index([gameId, createdAt], map: "idx_gamefollow_gameId_createdAt")
}

model Metric {
  id        String   @id @default(cuid())
  gameId    String
  type      String
  referrer  String?
  userId    String?
  userAgent String?
  ipAddress String?
  timestamp DateTime @default(now())
  product   Product  @relation(fields: [gameId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([gameId, type])
  @@index([timestamp])
  @@index([type])
  @@index([gameId, timestamp], map: "idx_metric_gameId_timestamp")
}

model ProductComment {
  id        String           @id @default(cuid())
  content   String
  parentId  String?
  productId String
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  votes     CommentVote[]
  parent    ProductComment?  @relation("ProductCommentReplies", fields: [parentId], references: [id])
  replies   ProductComment[] @relation("ProductCommentReplies")
  product   Product          @relation(fields: [productId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

model CommentVote {
  id        String         @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime       @default(now())
  comment   ProductComment @relation(fields: [commentId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  message   String
  type      String
  title     String?
  meta      Json?
  link      String?
  icon      String?
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([userId, read])
}

model PressKit {
  id        String   @id @default(cuid())
  gameId    String   @unique
  headline  String
  about     String
  features  String[]
  media     String[]
  zipUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Playtest {
  id        String          @id @default(uuid())
  gameId    String
  quota     Int
  expiresAt DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  claims    PlaytestClaim[]
}

model PlaytestClaim {
  id         String   @id @default(uuid())
  playtestId String
  userId     String
  claimedAt  DateTime @default(now())
  playtest   Playtest @relation(fields: [playtestId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([playtestId, userId])
}

model Tag {
  id        String       @id @default(cuid())
  slug      String       @unique
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  products  ProductTag[]
}

model ProductTag {
  id        String   @id @default(cuid())
  productId String
  tagId     String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@index([tagId])
}

model Category {
  id        String            @id @default(cuid())
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([categoryId])
}

model ProductMaker {
  id        String    @id @default(cuid())
  productId String
  userId    String?
  email     String?
  role      MakerRole @default(MAKER)
  isCreator Boolean   @default(false)
  createdAt DateTime  @default(now())
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([userId])
}

model Studio {
  id        String   @id @default(cuid())
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
}

model SponsorshipRequest {
  id        String        @id @default(cuid())
  title     String
  gameUrl   String
  developer String
  email     String
  slot      String
  notes     String?
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([status])
  @@index([createdAt])
}

model Post {
  id        String        @id @default(cuid())
  content   String?
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  hashtags  Json?
  images    Json?
  pollId    String?       @unique
  likes     Like[]
  poll      Poll?
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  PostComment[]

  @@index([createdAt])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model PostComment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdAt])
}

model Poll {
  id        String       @id @default(cuid())
  question  String
  expiresAt DateTime
  createdAt DateTime     @default(now())
  postId    String?      @unique
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  options   PollOption[]
  votes     PollVote[]

  @@index([expiresAt])
  @@index([createdAt])
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  pollId    String
  createdAt DateTime   @default(now())
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     PollVote[]

  @@index([pollId])
}

model PollVote {
  id        String     @id @default(cuid())
  userId    String
  createdAt DateTime   @default(now())
  optionId  String
  pollId    String?
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      Poll?      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, optionId])
  @@index([optionId])
  @@index([createdAt])
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@index([email])
  @@index([createdAt])
}

model AdvertiseCampaign {
  id                  String         @id @default(cuid())
  userId              String?
  goal                String         // Brand Awareness, Game Launch, Community Growth
  budget              Int            @default(0)
  startDate           DateTime?
  endDate             DateTime?
  audience            Json?          // { countries: string[], ageRange: string[], interests: string[] }
  media               Json?          // { files: string[], thumbnail: string }
  status              CampaignStatus @default(DRAFT)
  notes               String?
  metadata            Json?          // { placements: string[], packageType: string, gameName: string }
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  user                User?          @relation(fields: [userId], references: [id])

  // Legacy fields for backward compatibility
  placements          String[]       @default([])
  durationType        String         @default("monthly")
  totalPrice          Int            @default(0)
  priceBreakdown      Json?
  gameId              String?
  budgetDaily         Int            @default(0)
  budgetTotal         Int            @default(0)
  duration            String         @default("")
  countries           String[]       @default([])
  platforms           String[]       @default([])
  ageGroups           String[]       @default([])
  promotionFocus      String[]       @default([])
  bannerPlacement     String         @default("")
  featuredSlot        String         @default("")
  newsletterHighlight String         @default("")
  strategySuggestion  String?
  contactEmail        String?
  campaignTagline     String?
  creativeUrl         String?
  payments            CampaignPayment[]

  @@index([userId, createdAt])
  @@index([userId, status])
}

model CampaignPayment {
  id          String            @id @default(cuid())
  campaignId  String
  userId      String
  amount      Int               // Amount in cents
  currency    String            @default("USD")
  status      PaymentStatus     @default(PENDING)
  paymentMethod String?         // stripe, paypal, etc.
  transactionId String?         // External payment processor transaction ID
  metadata    Json?             // Additional payment data
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  campaign    AdvertiseCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([userId])
  @@index([status])
}

model AdRequest {
  id            String        @id @default(cuid())
  userId        String
  gameId        String
  gameName      String
  promotionType String
  package       String
  duration      String
  price         Int
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum UserRole {
  USER
  ADMIN
}

enum ProductStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
  ARCHIVED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MakerRole {
  MAKER
  DESIGNER
  DEVELOPER
  PUBLISHER
  HUNTER
}

enum CampaignStatus {
  DRAFT
  SUBMITTED
  APPROVED
  ACTIVE
  REJECTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

model Campaign {
  id          String   @id @default(cuid())
  userId      String
  gameId      String
  gameName    String
  goal        String
  placements  String[]
  package     String
  budget      Int
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([submittedAt])
}
